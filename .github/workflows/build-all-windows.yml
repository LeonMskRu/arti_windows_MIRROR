name: Build Arti + Transports (Windows x64 + TEST)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"  # ежедневно 06:00 UTC

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # ---------------- Checkout ----------------
      - name: Checkout meta repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # ---------------- Install SQLite ----------------
      - name: Install SQLite (for static build)
        run: choco install sqlite -y

      # ---------------- Rust toolchain ----------------
      - name: Setup Rust (MSVC x64)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      # ---------------- Clone Arti ----------------
      - name: Clone Arti (mirror)
        run: |
          git clone --depth 1 --branch main https://github.com/${{ github.repository_owner }}/arti-mirror arti
          cd arti
          git fetch --tags --force

      - name: Detect Arti version
        id: arti_ver
        working-directory: arti
        run: |
          $ver = git tag --list "arti-*" --sort=-creatordate | Select-Object -First 1
          if ([string]::IsNullOrEmpty($ver)) { $ver="arti-v0.0.0" }
          echo "arti_version=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV
          Write-Host "Arti version: $ver"

      # ---------------- Build Arti x64 ----------------
      - name: Build arti.exe x64
        working-directory: arti
        run: cargo build --release --target x86_64-pc-windows-msvc --package arti --bin arti --features static

      - name: Copy arti x64 binary
        run: |
          New-Item -ItemType Directory -Force dist | Out-Null
          Copy-Item arti/target/x86_64-pc-windows-msvc/release/arti.exe dist/arti-x64.exe

      # ---------------- TEST BUILD (x64 only) ----------------
      - name: Build arti.exe TEST x64
        working-directory: arti
        continue-on-error: true
        run: |
          cargo build --release --target x86_64-pc-windows-msvc `
            -p arti -p tor-circmgr -p tor-cell -p tor-proto --bin arti `
            --features "static,conflux,vanguards"

      - name: Copy arti x64 TEST binary
        if: success() || failure()
        continue-on-error: true
        run: |
          if (Test-Path target/x86_64-pc-windows-msvc/release/arti.exe) {
            Copy-Item target/x86_64-pc-windows-msvc/release/arti.exe dist/arti-x64-test.exe
          } else {
            Write-Host "⚠️ TEST build failed, skipping copy."
          }

      # ---------------- Go toolchain ----------------
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      # ---------------- Lyrebird x64 ----------------
      - name: Clone lyrebird
        run: git clone --depth 1 https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/lyrebird.git

      - name: Build lyrebird x64
        working-directory: lyrebird/cmd/lyrebird
        run: go build -o ../../../dist/lyrebird-x64.exe .

      # ---------------- Snowflake x64 ----------------
      - name: Clone snowflake
        run: git clone --depth 1 https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/snowflake.git

      - name: Build snowflake x64
        working-directory: snowflake/client
        run: go build -o ../../dist/snowflake-client-x64.exe .

      # ---------------- WebTunnel x64 ----------------
      - name: Clone webtunnel
        run: git clone --depth 1 https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/webtunnel.git

      - name: Build webtunnel x64
        working-directory: webtunnel/main/client
        run: go build -o ../../../dist/webtunnel-client-x64.exe .

      # ---------------- Packaging ----------------
      - name: Create ZIPs
        run: |
          Compress-Archive -Path dist/arti-x64.exe             -DestinationPath dist/arti-x64.zip
          Compress-Archive -Path dist/arti-x64-test.exe        -DestinationPath dist/arti-x64-test.zip
          Compress-Archive -Path dist/lyrebird-x64.exe         -DestinationPath dist/lyrebird-x64.zip
          Compress-Archive -Path dist/snowflake-client-x64.exe -DestinationPath dist/snowflake-x64.zip
          Compress-Archive -Path dist/webtunnel-client-x64.exe -DestinationPath dist/webtunnel-x64.zip
          Compress-Archive -Path dist/*.exe                    -DestinationPath dist/bundle.zip

      # ---------------- SHA256 ----------------
      - name: SHA256 checksums
        run: |
          $files = Get-ChildItem dist -File -Exclude SHA256SUMS.txt
          if ($files.Count -gt 0) {
            $files | ForEach-Object {
                $h = Get-FileHash $_.FullName -Algorithm SHA256
                "$($h.Hash)  $($_.Name)"
            } | Out-File dist/SHA256SUMS.txt -Encoding ascii
          }

      # ---------------- Release ----------------
      - name: Prepare release notes
        run: |
          @"
          Bundle build for Windows x64

          - Arti version: $env:arti_version
          - TEST build x64 with features: conflux, vanguards
          - Lyrebird, Snowflake, WebTunnel: latest main snapshot
          "@ | Out-File RELEASE_NOTES.md -Encoding utf8

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.arti_version }}
          name: "Tor bundle (${{ env.arti_version }})"
          body_path: RELEASE_NOTES.md
          files: |
            dist/arti-x64.zip
            dist/arti-x64-test.zip
            dist/lyrebird-x64.zip
            dist/snowflake-x64.zip
            dist/webtunnel-x64.zip
            dist/bundle.zip
            dist/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
